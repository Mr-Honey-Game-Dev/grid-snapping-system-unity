//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/ActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ActionMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActionMap"",
    ""maps"": [
        {
            ""name"": ""Move"",
            ""id"": ""a7b7a583-b8c0-4bce-b5f7-01883fe94993"",
            ""actions"": [
                {
                    ""name"": ""MoveDir"",
                    ""type"": ""Value"",
                    ""id"": ""f5f992a0-d9a6-4f24-b65b-606d7a4405a0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryTouchStart"",
                    ""type"": ""Button"",
                    ""id"": ""cc19145d-6e71-4f57-a392-42d929f8e122"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5ebc19b2-87bf-4083-945a-58d50e5edc34"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2cca038c-c1ea-4dd0-bfef-35dcf5504473"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertY=false)"",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c95e527a-8e37-432f-a946-6802679c6560"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a16f2276-4b7a-48eb-b51a-950184c825d4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4c770837-819c-4536-b37e-7ad5bcff9c82"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""40912290-ddce-437b-9ca1-db0bf104506f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7aba7879-6bd5-44d4-b40b-edee5e0c7145"",
                    ""path"": ""<Touchscreen>/touch0/delta"",
                    ""interactions"": """",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""groups"": ""DefaultScheme"",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""88d1b76e-ef6e-4ba3-a3f6-be349c1ed66f"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Zoom"",
            ""id"": ""fbd96d85-1963-4a03-a5e4-b0ea9cea38a9"",
            ""actions"": [
                {
                    ""name"": ""SecondaryTouchStart"",
                    ""type"": ""Button"",
                    ""id"": ""93d5b0ab-4200-44ba-8560-9738d34b88eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""8f8fff00-b354-4477-ba33-23054fb72a95"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""e5e7a7be-d959-429e-af8a-714dedb2a95f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""4210402e-5c6c-49b3-9732-b5d5324be599"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8bcd645c-add9-4875-9571-32e6ee4476c5"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e250b1b-f0ae-41bc-ad9c-153bb835ca8e"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""029e8742-1b5c-412b-a636-6178c2016405"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d65c14d-dfa3-4a6c-b4df-242fcd9acfb7"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""7c14d809-b6c5-4e0e-9719-b7ce06d9672e"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""88c97a5b-87a8-4bd3-ace7-80c360fcb2fa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""99d4c544-915b-477e-b3ca-9d58bd03931a"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9156054a-9e24-43a0-be56-847df48bd307"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""245d6a61-a0aa-4047-9ce0-0605945b8c6f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""DefaultScheme"",
            ""bindingGroup"": ""DefaultScheme"",
            ""devices"": []
        }
    ]
}");
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_MoveDir = m_Move.FindAction("MoveDir", throwIfNotFound: true);
        m_Move_PrimaryTouchStart = m_Move.FindAction("PrimaryTouchStart", throwIfNotFound: true);
        // Zoom
        m_Zoom = asset.FindActionMap("Zoom", throwIfNotFound: true);
        m_Zoom_SecondaryTouchStart = m_Zoom.FindAction("SecondaryTouchStart", throwIfNotFound: true);
        m_Zoom_PrimaryTouchPosition = m_Zoom.FindAction("PrimaryTouchPosition", throwIfNotFound: true);
        m_Zoom_SecondaryTouchPosition = m_Zoom.FindAction("SecondaryTouchPosition", throwIfNotFound: true);
        m_Zoom_Scroll = m_Zoom.FindAction("Scroll", throwIfNotFound: true);
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_MousePosition = m_Mouse.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move
    private readonly InputActionMap m_Move;
    private IMoveActions m_MoveActionsCallbackInterface;
    private readonly InputAction m_Move_MoveDir;
    private readonly InputAction m_Move_PrimaryTouchStart;
    public struct MoveActions
    {
        private @ActionMap m_Wrapper;
        public MoveActions(@ActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveDir => m_Wrapper.m_Move_MoveDir;
        public InputAction @PrimaryTouchStart => m_Wrapper.m_Move_PrimaryTouchStart;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void SetCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterface != null)
            {
                @MoveDir.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnMoveDir;
                @MoveDir.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnMoveDir;
                @MoveDir.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnMoveDir;
                @PrimaryTouchStart.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnPrimaryTouchStart;
                @PrimaryTouchStart.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnPrimaryTouchStart;
                @PrimaryTouchStart.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnPrimaryTouchStart;
            }
            m_Wrapper.m_MoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveDir.started += instance.OnMoveDir;
                @MoveDir.performed += instance.OnMoveDir;
                @MoveDir.canceled += instance.OnMoveDir;
                @PrimaryTouchStart.started += instance.OnPrimaryTouchStart;
                @PrimaryTouchStart.performed += instance.OnPrimaryTouchStart;
                @PrimaryTouchStart.canceled += instance.OnPrimaryTouchStart;
            }
        }
    }
    public MoveActions @Move => new MoveActions(this);

    // Zoom
    private readonly InputActionMap m_Zoom;
    private IZoomActions m_ZoomActionsCallbackInterface;
    private readonly InputAction m_Zoom_SecondaryTouchStart;
    private readonly InputAction m_Zoom_PrimaryTouchPosition;
    private readonly InputAction m_Zoom_SecondaryTouchPosition;
    private readonly InputAction m_Zoom_Scroll;
    public struct ZoomActions
    {
        private @ActionMap m_Wrapper;
        public ZoomActions(@ActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @SecondaryTouchStart => m_Wrapper.m_Zoom_SecondaryTouchStart;
        public InputAction @PrimaryTouchPosition => m_Wrapper.m_Zoom_PrimaryTouchPosition;
        public InputAction @SecondaryTouchPosition => m_Wrapper.m_Zoom_SecondaryTouchPosition;
        public InputAction @Scroll => m_Wrapper.m_Zoom_Scroll;
        public InputActionMap Get() { return m_Wrapper.m_Zoom; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ZoomActions set) { return set.Get(); }
        public void SetCallbacks(IZoomActions instance)
        {
            if (m_Wrapper.m_ZoomActionsCallbackInterface != null)
            {
                @SecondaryTouchStart.started -= m_Wrapper.m_ZoomActionsCallbackInterface.OnSecondaryTouchStart;
                @SecondaryTouchStart.performed -= m_Wrapper.m_ZoomActionsCallbackInterface.OnSecondaryTouchStart;
                @SecondaryTouchStart.canceled -= m_Wrapper.m_ZoomActionsCallbackInterface.OnSecondaryTouchStart;
                @PrimaryTouchPosition.started -= m_Wrapper.m_ZoomActionsCallbackInterface.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.performed -= m_Wrapper.m_ZoomActionsCallbackInterface.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.canceled -= m_Wrapper.m_ZoomActionsCallbackInterface.OnPrimaryTouchPosition;
                @SecondaryTouchPosition.started -= m_Wrapper.m_ZoomActionsCallbackInterface.OnSecondaryTouchPosition;
                @SecondaryTouchPosition.performed -= m_Wrapper.m_ZoomActionsCallbackInterface.OnSecondaryTouchPosition;
                @SecondaryTouchPosition.canceled -= m_Wrapper.m_ZoomActionsCallbackInterface.OnSecondaryTouchPosition;
                @Scroll.started -= m_Wrapper.m_ZoomActionsCallbackInterface.OnScroll;
                @Scroll.performed -= m_Wrapper.m_ZoomActionsCallbackInterface.OnScroll;
                @Scroll.canceled -= m_Wrapper.m_ZoomActionsCallbackInterface.OnScroll;
            }
            m_Wrapper.m_ZoomActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SecondaryTouchStart.started += instance.OnSecondaryTouchStart;
                @SecondaryTouchStart.performed += instance.OnSecondaryTouchStart;
                @SecondaryTouchStart.canceled += instance.OnSecondaryTouchStart;
                @PrimaryTouchPosition.started += instance.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.performed += instance.OnPrimaryTouchPosition;
                @PrimaryTouchPosition.canceled += instance.OnPrimaryTouchPosition;
                @SecondaryTouchPosition.started += instance.OnSecondaryTouchPosition;
                @SecondaryTouchPosition.performed += instance.OnSecondaryTouchPosition;
                @SecondaryTouchPosition.canceled += instance.OnSecondaryTouchPosition;
                @Scroll.started += instance.OnScroll;
                @Scroll.performed += instance.OnScroll;
                @Scroll.canceled += instance.OnScroll;
            }
        }
    }
    public ZoomActions @Zoom => new ZoomActions(this);

    // Mouse
    private readonly InputActionMap m_Mouse;
    private IMouseActions m_MouseActionsCallbackInterface;
    private readonly InputAction m_Mouse_MousePosition;
    public struct MouseActions
    {
        private @ActionMap m_Wrapper;
        public MouseActions(@ActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_Mouse_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void SetCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterface != null)
            {
                @MousePosition.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_MouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public MouseActions @Mouse => new MouseActions(this);
    private int m_DefaultSchemeSchemeIndex = -1;
    public InputControlScheme DefaultSchemeScheme
    {
        get
        {
            if (m_DefaultSchemeSchemeIndex == -1) m_DefaultSchemeSchemeIndex = asset.FindControlSchemeIndex("DefaultScheme");
            return asset.controlSchemes[m_DefaultSchemeSchemeIndex];
        }
    }
    public interface IMoveActions
    {
        void OnMoveDir(InputAction.CallbackContext context);
        void OnPrimaryTouchStart(InputAction.CallbackContext context);
    }
    public interface IZoomActions
    {
        void OnSecondaryTouchStart(InputAction.CallbackContext context);
        void OnPrimaryTouchPosition(InputAction.CallbackContext context);
        void OnSecondaryTouchPosition(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
    }
    public interface IMouseActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
